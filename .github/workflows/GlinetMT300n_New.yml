#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
name: Gl.MT200n_new
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'        
  # schedule:
  #   - cron: 0 20 * * *
  # release:
  #   types: [published]
### 环境变量设置
env:
  DEFAULT_TARGET: Gl.MT200n  # 设备名称
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master #源码分支   
  FEEDS_CONF: feeds.conf.default #FEEDS_CONF	自定义feeds.conf.default文件名  
  CONFIG_FILE: Config/GLinetMT300N.config #CONFIG_FILE	自定义.config文件名  *.config 自己定义的配置文件
  DIY_P1_SH: diy-part1.sh #DIY_P1_SH	自定义diy-part1.sh文件名  
  DIY_P2_SH: diy-part2.sh #DIY_P2_SH	自定义diy-part2.sh文件名  
  UPLOAD_BIN_DIR: true #UPLOAD_BIN_DIR	上传 bin 目录。即包含所有 ipk 文件和固件的目录。默认false  
  UPLOAD_FIRMWARE: true #UPLOAD_FIRMWARE	上传固件目录。默认true  
  UPLOAD_COWTRANSFER: false #UPLOAD_COWTRANSFER	上传固件到奶牛快传。默认false  
  UPLOAD_WETRANSFER: false #UPLOAD_WERANSFER	上传固件到 WeTransfer 。默认false  
  UPLOAD_RELEASE: false #UPLOAD_RELEASE	上传固件到 releases 。默认false
  # DEFAULT_SOURCE: coolsnowwolf/lede:master # 源码仓库:分支
  # UPLOAD_ARTIFACTS: false # 上传固件到 Github Artifacts
  # UPLOAD_BIN_ARTIFACTS: false # 上传 bin 文件夹到 Github Artifacts
  DELETE_USELESS_FILES: true   # 删除无用文件以释放更多空间
  DELETE_OLD_WORKFLOW: true  # 删除早期的 workflow 任务
  TZ: Asia/Shanghai  #TZ	时区设置
### 环境变量设置 END
jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a	  
    - name: Costom configure file
      run: |
        rm -f ./.config*
        touch ./.config
        #
        # ========================固件定制部分========================
        # 
        # 
        # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
        # 
        # 以下为定制化固件选项和说明:
        #
        #
        # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
        # 
        #          =========================================
        #         |  # 取消编译VMware镜像:                   |
        #         |  cat >> .config <<EOF                   |
        #         |  # CONFIG_VMDK_IMAGES is not set        |
        #         |  EOF                                    |
        #          =========================================
        #
        # 
        # 以下是一些提前准备好的一些插件选项.
        # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
        # 如果不需要代码块里的某一项配置, 只需要删除相应行.
        #
        # 如果需要其他插件, 请按照示例自行添加.
        # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
        # 
        # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 EOF 回环内的内容.
        # 
        # 编译固件:
        cat >> .config <<EOF
        # CONFIG_TARGET_x86=y
        # CONFIG_TARGET_x86_64=y
        # CONFIG_TARGET_x86_64_Generic=y
        CONFIG_MODULES=y
        CONFIG_HAVE_DOT_CONFIG=y
        CONFIG_TARGET_ramips=y
        CONFIG_TARGET_ramips_mt7620=y
        CONFIG_TARGET_ramips_mt7620_DEVICE_glinet_gl-mt300n=y
        EOF
        # 固件压缩:
        cat >> .config <<EOF
        CONFIG_TARGET_IMAGES_GZIP=y
        EOF
        # 编译UEFI固件:
        # cat >> .config <<EOF
        # CONFIG_EFI_IMAGES=y
        # EOF
        # IPv6支持:
        # cat >> .config <<EOF
        # CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y
        # CONFIG_PACKAGE_ipv6helper=y
        # EOF
        # 多文件系统支持:
        cat >> .config <<EOF
        CONFIG_PACKAGE_kmod-fs-nfs=y
        CONFIG_PACKAGE_kmod-fs-nfs-common=y
        # CONFIG_PACKAGE_kmod-fs-nfs-v3=y
        CONFIG_PACKAGE_kmod-fs-nfs-v4=y
        CONFIG_PACKAGE_kmod-fs-ntfs=y
        CONFIG_PACKAGE_kmod-fs-squashfs=y
        # EOF
        # USB3.0支持:
        # cat >> .config <<EOF
        # CONFIG_PACKAGE_kmod-usb-ohci=y
        # CONFIG_PACKAGE_kmod-usb-ohci-pci=y
        # CONFIG_PACKAGE_kmod-usb2=y
        # CONFIG_PACKAGE_kmod-usb2-pci=y
        # CONFIG_PACKAGE_kmod-usb3=y
        # EOF
        # 常用LuCI插件选择:
        # cat >> .config <<EOF
        # CONFIG_PACKAGE_luci-app-adguardhome=y
        # CONFIG_PACKAGE_luci-app-advanced=y
        # CONFIG_PACKAGE_luci-app-advanced-reboot=y
        # CONFIG_PACKAGE_luci-app-ahcp=y
        # CONFIG_PACKAGE_luci-app-airplay2=y
        # CONFIG_PACKAGE_luci-app-aliddns=y
        # CONFIG_PACKAGE_luci-app-amule=y
        # CONFIG_PACKAGE_luci-app-argon-config=y
        # CONFIG_PACKAGE_luci-app-aria2=y
        # CONFIG_PACKAGE_luci-app-arpbind=y
        # CONFIG_PACKAGE_luci-app-asterisk=y
        # CONFIG_PACKAGE_luci-app-attendedsysupgrade=y
        # CONFIG_PACKAGE_luci-app-autoreboot=y
        # CONFIG_PACKAGE_luci-app-baidupcs-web=y
        # CONFIG_PACKAGE_luci-app-bcp38=y
        # CONFIG_PACKAGE_luci-app-bird1-ipv4=y
        # CONFIG_PACKAGE_luci-app-bird1-ipv6=y
        # CONFIG_PACKAGE_luci-app-bmx6=y
        # CONFIG_PACKAGE_luci-app-cifs-mount=y
        # CONFIG_PACKAGE_luci-app-cifsd=y
        # CONFIG_PACKAGE_luci-app-cjdns=y
        # CONFIG_PACKAGE_luci-app-clamav=y
        # CONFIG_PACKAGE_luci-app-clash=y
        # CONFIG_PACKAGE_luci-app-commands=y
        # CONFIG_PACKAGE_luci-app-cshark=y
        # CONFIG_PACKAGE_luci-app-ddns=y
        # CONFIG_PACKAGE_luci-app-diag-core=y
        # CONFIG_PACKAGE_luci-app-diskman=y
        # CONFIG_PACKAGE_luci-app-diskman_INCLUDE_btrfs_progs=y
        # CONFIG_PACKAGE_luci-app-diskman_INCLUDE_lsblk=y
        # CONFIG_PACKAGE_luci-app-diskman_INCLUDE_mdadm=y
        # CONFIG_PACKAGE_luci-app-dnscrypt-proxy=y
        # CONFIG_PACKAGE_luci-app-dnsfilter=y
        # CONFIG_PACKAGE_luci-app-dnsforwarder=y
        # CONFIG_PACKAGE_luci-app-docker=y
        # CONFIG_PACKAGE_luci-app-dump1090=y
        # CONFIG_PACKAGE_luci-app-dynapoint=y
        # CONFIG_PACKAGE_luci-app-e2guardian=y
        # CONFIG_PACKAGE_luci-app-easymesh=y
        # CONFIG_PACKAGE_luci-app-eqos=y
        # CONFIG_PACKAGE_luci-app-familycloud=y
        # CONFIG_PACKAGE_luci-app-filetransfer=y
        # CONFIG_PACKAGE_luci-app-firewall=y
        # CONFIG_PACKAGE_luci-app-flowoffload=y
        # CONFIG_PACKAGE_luci-app-frpc=y
        # CONFIG_PACKAGE_luci-app-frps=y
        # CONFIG_PACKAGE_luci-app-fwknopd=y
        # CONFIG_PACKAGE_luci-app-gost=y
        # CONFIG_PACKAGE_luci-app-guest-wifi=y
        # CONFIG_PACKAGE_luci-app-haproxy-tcp=y
        # CONFIG_PACKAGE_luci-app-hd-idle=y
        # CONFIG_PACKAGE_luci-app-hnet=y
        # CONFIG_PACKAGE_luci-app-https-dns-proxy=y
        # CONFIG_PACKAGE_luci-app-ipsec-vpnd=y
        # CONFIG_PACKAGE_luci-app-jd-dailybonus=y
        # CONFIG_PACKAGE_luci-app-kodexplorer=y
        # CONFIG_PACKAGE_luci-app-lxc=y
        # CONFIG_PACKAGE_luci-app-minidlna=y
        # CONFIG_PACKAGE_luci-app-mjpg-streamer=y
        # CONFIG_PACKAGE_luci-app-mtwifi=y
        # CONFIG_PACKAGE_luci-app-music-remote-center=y
        # CONFIG_PACKAGE_luci-app-mwan3=y
        # CONFIG_PACKAGE_luci-app-mwan3helper=y
        # CONFIG_PACKAGE_luci-app-n2n_v2=y
        # CONFIG_PACKAGE_luci-app-netdata=y
        # CONFIG_PACKAGE_luci-app-nfs=y
        # CONFIG_PACKAGE_luci-app-nft-qos=y
        # CONFIG_PACKAGE_luci-app-nlbwmon=y
        # CONFIG_PACKAGE_luci-app-noddos=y
        # CONFIG_PACKAGE_luci-app-nps=y
        # CONFIG_PACKAGE_luci-app-ntpc=y
        # CONFIG_PACKAGE_luci-app-ocserv=y
        # CONFIG_PACKAGE_luci-app-olsr=y
        # CONFIG_PACKAGE_luci-app-olsr-services=y
        # CONFIG_PACKAGE_luci-app-olsr-viz=y
        # CONFIG_PACKAGE_luci-app-openclash=y
        # CONFIG_PACKAGE_luci-app-openvpn=y
        # CONFIG_PACKAGE_luci-app-openvpn-server=y
        # CONFIG_PACKAGE_luci-app-p910nd=y
        # CONFIG_PACKAGE_luci-app-pagekitec=y
        CONFIG_PACKAGE_luci-app-passwall=y
        #
        # Configuration
        #
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Brook=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Dns2socks=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Kcptun=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_NaiveProxy=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_PDNSD=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y
        # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client=y
        # CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Server=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple-obfs=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_GO=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin=y
        CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y
        # end of Configuration
        CONFIG_PACKAGE_luci-app-samba=y

        # EOF
        # LuCI主题:
        cat >> .config <<EOF
        # CONFIG_PACKAGE_luci-theme-argon=y
        # CONFIG_PACKAGE_luci-theme-argon_new=y
        # CONFIG_PACKAGE_luci-theme-atmaterial=y
        CONFIG_PACKAGE_luci-theme-bootstrap=y
        # CONFIG_PACKAGE_luci-theme-edge=y
        # CONFIG_PACKAGE_luci-theme-ifit=y
        # CONFIG_PACKAGE_luci-theme-material=y
        # CONFIG_PACKAGE_luci-theme-netgear=y
        # CONFIG_PACKAGE_luci-theme-opentomato=y
        # CONFIG_PACKAGE_luci-theme-opentomcat=y
        # CONFIG_PACKAGE_luci-theme-opentopd=y
        EOF
        # 常用软件包:
        # cat >> .config <<EOF
        # CONFIG_PACKAGE_curl=y
        # CONFIG_PACKAGE_htop=y
        # CONFIG_PACKAGE_nano=y
        # CONFIG_PACKAGE_screen=y
        # CONFIG_PACKAGE_tree=y
        # CONFIG_PACKAGE_vim-fuller=y
        # CONFIG_PACKAGE_wget=y
        # EOF
        # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号):
        # cat >> .config <<EOF
        # # CONFIG_TARGET_IMAGES_PAD is not set
        # # CONFIG_VMDK_IMAGES is not set
        # EOF
        # 
        # ========================固件定制部分结束========================
        # 
    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"
    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "🔗 [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "🔗 [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"
    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
